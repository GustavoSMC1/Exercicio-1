#include <iostream>
using namespace std;

const int N = 20;

bool dentroDosLimites(int i, int j) {
    return (i >= 0 && i < N && j >= 0 && j < N);
}

int main() {
    char campo[N][N];
    int resultado[N][N] = {0};

    cout << "Digite a matriz 20x20 (use '*' para bomba e '-' para vazio):\n";
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            cin >> campo[i][j];

    int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};


    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (campo[i][j] == '*') {
                resultado[i][j] = -1; 
                for (int k = 0; k < 8; ++k) {
                    int ni = i + dx[k];
                    int nj = j + dy[k];
                    if (dentroDosLimites(ni, nj) && campo[ni][nj] != '*')
                        resultado[ni][nj]++;
                }
            }
        }
    }

    cout << "\nResultado (matriz com contagem de bombas ao redor):\n";
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (resultado[i][j] == -1)
                cout << "* ";
            else
                cout << resultado[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


Leitura da matriz
O usuário preenche uma matriz 20x20 com '*' e '-'.

Inicialização
Uma segunda matriz (resultado) é criada para armazenar a contagem de bombas vizinhas, iniciada com zeros.

Cálculo de vizinhos
Usam-se vetores dx e dy para verificar as 8 direções ao redor de cada célula.

Processamento

Se a célula tem bomba (*), marca -1 no resultado.

Para cada vizinho, se não for bomba, incrementa o contador.

Impressão

Exibe '*' nas posições com bomba.

Exibe números onde não há bomba, indicando quantas bombas estão ao redor.

